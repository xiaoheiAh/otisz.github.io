<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on xiaoheiAh's blog</title><link>https://blog.xiaohei.im/posts/</link><description>Recent content in Posts on xiaoheiAh's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© Copyright notice</copyright><lastBuildDate>Fri, 03 Apr 2020 09:26:43 +0800</lastBuildDate><atom:link href="https://blog.xiaohei.im/posts/feed.xml" rel="self" type="application/rss+xml"/><item><title>使用 GitHub Action 持续集成你的博客</title><link>https://blog.xiaohei.im/posts/github-action-guide/</link><pubDate>Fri, 03 Apr 2020 09:26:43 +0800</pubDate><guid>https://blog.xiaohei.im/posts/github-action-guide/</guid><description>&lt;p>记录下自己的部署踩坑经历。&lt;/p></description></item><item><title>「LeetCode」链表题解</title><link>https://blog.xiaohei.im/posts/leetcode/linkedlist/</link><pubDate>Thu, 26 Dec 2019 18:22:05 +0800</pubDate><guid>https://blog.xiaohei.im/posts/leetcode/linkedlist/</guid><description/></item><item><title>「LeetCode」数组题解</title><link>https://blog.xiaohei.im/posts/leetcode/array/</link><pubDate>Thu, 26 Dec 2019 17:22:05 +0800</pubDate><guid>https://blog.xiaohei.im/posts/leetcode/array/</guid><description/></item><item><title>[学习笔记] Netty</title><link>https://blog.xiaohei.im/posts/netty/</link><pubDate>Fri, 29 Nov 2019 18:40:27 +0800</pubDate><guid>https://blog.xiaohei.im/posts/netty/</guid><description/></item><item><title>Redis HA - Cluster</title><link>https://blog.xiaohei.im/posts/redis/cluster/</link><pubDate>Sun, 24 Nov 2019 11:48:17 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/cluster/</guid><description>&lt;p>Redis 官方高可用(HA)方案之一: &lt;strong>Cluster&lt;/strong>.可以解决 &lt;code>sentinel&lt;/code> 模式单点写入的问题.&lt;/p></description></item><item><title>Redis HA - 哨兵模式</title><link>https://blog.xiaohei.im/posts/redis/sentinel/</link><pubDate>Sat, 23 Nov 2019 17:56:15 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/sentinel/</guid><description>&lt;p>Redis 官方高可用(HA)方案之一: &lt;strong>哨兵模式&lt;/strong>&lt;/p></description></item><item><title>Redis-复制功能探索</title><link>https://blog.xiaohei.im/posts/redis/replication/</link><pubDate>Sat, 16 Nov 2019 14:24:40 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/replication/</guid><description>&lt;p>之前对&lt;code>redis&lt;/code> 的复制只有一点点了解,这次想要搞明白的是:如何实现的复制? 复制会遇到哪些问题(时延/一致性保证/网络故障时的处理)? 如何解决?高可用实现方案?&lt;/p>
&lt;p>文章有部分是直接翻译的 &lt;a href="https://redis.io/topics/replication">https://redis.io/topics/replication&lt;/a>&lt;/p></description></item><item><title>Redis-事件</title><link>https://blog.xiaohei.im/posts/redis/event/</link><pubDate>Thu, 14 Nov 2019 15:01:45 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/event/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>事件驱动程序设计&lt;/strong>（英语：&lt;strong>Event-driven programming&lt;/strong>）是一种电脑&lt;a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88">程序设计&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9E%8B">模型&lt;/a>。这种模型的程序运行流程是由用户的动作（如&lt;a href="https://zh.wikipedia.org/wiki/%E6%BB%91%E9%BC%A0">鼠标&lt;/a>的按键，键盘的按键动作）或者是由其他程序的&lt;a href="https://zh.wikipedia.org/wiki/%E8%A8%8A%E6%81%AF">消息&lt;/a>来决定的。相对于批处理程序设计（batch programming）而言，程序运行的流程是由&lt;a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB">程序员&lt;/a>来决定。批量的程序设计在初级程序设计教学课程上是一种方式。然而，事件驱动程序设计这种设计模型是在&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%92%E5%8B%95%E7%A8%8B%E5%BA%8F&amp;amp;action=edit&amp;amp;redlink=1">交互程序&lt;/a>（Interactive program）的情况下孕育而生的。 &lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88">&amp;ndash;wikipedia&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Redis-AOF持久化</title><link>https://blog.xiaohei.im/posts/redis/aof/</link><pubDate>Fri, 08 Nov 2019 15:18:05 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/aof/</guid><description>&lt;p>&lt;code>RDB&lt;/code> 和 &lt;code>AOF&lt;/code> 区别在于: 前者保存数据库快照,持久化所有键值对,后者通过保存 &lt;strong>写命令&lt;/strong> 保证数据库的状态.&lt;/p></description></item><item><title>Redis-RDB持久化</title><link>https://blog.xiaohei.im/posts/redis/rdb/</link><pubDate>Wed, 06 Nov 2019 19:08:56 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/rdb/</guid><description>&lt;p>&lt;code>redis&lt;/code> 为内存数据库,一旦服务器进程退出,服务器中的数据就不见了.所以内存中的数据需要持久化的硬盘中来保证可以在必要的时候进行故障恢复. &lt;code>RDB&lt;/code> 就是 &lt;code>redis&lt;/code> 提供的一种持久化方式.&lt;/p></description></item><item><title>Redis-数据库长什么样?</title><link>https://blog.xiaohei.im/posts/redis/db/</link><pubDate>Wed, 06 Nov 2019 11:00:32 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/db/</guid><description/></item><item><title>Redis-万物皆「对象」</title><link>https://blog.xiaohei.im/posts/redis/obj/</link><pubDate>Mon, 04 Nov 2019 18:56:15 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/obj/</guid><description>&lt;p>Redis有很多种数据结构,但其并没有直接使用这些数据结构来构建这个 &lt;code>NOSQL&lt;/code>, 而是通过 &lt;code>对象系统&lt;/code> 完成了对所有数据结构的统一管理, 实现内存回收, 对象共享等特性~&lt;/p></description></item><item><title>Redis-分布式锁</title><link>https://blog.xiaohei.im/posts/redis/distributed-lock/</link><pubDate>Sun, 03 Nov 2019 14:49:56 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/distributed-lock/</guid><description>&lt;p>分布式锁有很多中实现(纯数据库,zookeeper,redis),纯数据库的受限于数据库性能,zk 可以保证加锁的顺序,是公平锁.Redis中的实现就是接下来要学习的.&lt;/p></description></item><item><title>Redis-数据结构</title><link>https://blog.xiaohei.im/posts/redis/data-structure/</link><pubDate>Thu, 24 Oct 2019 09:59:11 +0800</pubDate><guid>https://blog.xiaohei.im/posts/redis/data-structure/</guid><description>&lt;p>系统学习 redis 相关的知识，从数据结构开始～&lt;/p></description></item><item><title>RabbitMQ-消息确认机制</title><link>https://blog.xiaohei.im/posts/mq/rabbitmq-ack-confirm/</link><pubDate>Wed, 23 Oct 2019 11:22:13 +0800</pubDate><guid>https://blog.xiaohei.im/posts/mq/rabbitmq-ack-confirm/</guid><description>&lt;p>RabbitMQ在保证生产端与消费端的数据安全上,提供了消息确认的机制来保证. 消费端到 &lt;code>broker&lt;/code> 端的确认常叫做&lt;code>ack机制&lt;/code>, &lt;code>broker&lt;/code> 到生产端常叫做&lt;code>confirm&lt;/code>.&lt;/p></description></item><item><title>Hexo => Hugo主题移植记录</title><link>https://blog.xiaohei.im/posts/hugo-theme-dev-note/</link><pubDate>Mon, 23 Sep 2019 19:08:35 +0800</pubDate><guid>https://blog.xiaohei.im/posts/hugo-theme-dev-note/</guid><description>&lt;blockquote>
&lt;p>最近使用&lt;a href="https://gohugo.io/">Hugo&lt;/a>作为博客引擎后,闲不下来总想去找一些简单好看的主题.在&lt;a href="https://themes.gohugo.io/">官方的主题列表&lt;/a>搜罗了一圈后,选择了&lt;a href="https://github.com/joway/hugo-theme-yinyang">yinyang&lt;/a>,非常简单,但是用了一段时间还是想找个功能全点的,无意中瞄到了一个博主的博客,主题特别吸引我,但是是 &lt;code>hexo&lt;/code> 平台的,搜了半天也没有人移植,就自己来吧~ 移植的过程中,遇到了挺多问题,也是这些问题慢慢的熟悉了hugo的模板结构.下面就来写一写自己遇到的问题~&lt;/p>
&lt;/blockquote></description></item><item><title>RabbitMQ-消息分发机制</title><link>https://blog.xiaohei.im/posts/mq/rabbitmq-msg-distribution/</link><pubDate>Sat, 21 Sep 2019 18:42:13 +0800</pubDate><guid>https://blog.xiaohei.im/posts/mq/rabbitmq-msg-distribution/</guid><description>&lt;p>rabbitmq有多种使用模式,在这里记录下不同模式的消息路由规则&lt;/p></description></item><item><title>RabbitMQ-入门及高可用集群部署</title><link>https://blog.xiaohei.im/posts/mq/rabbitmq-guide-and-ha-cluster/</link><pubDate>Wed, 04 Sep 2019 14:42:13 +0800</pubDate><guid>https://blog.xiaohei.im/posts/mq/rabbitmq-guide-and-ha-cluster/</guid><description/></item><item><title>AMQP消息模型</title><link>https://blog.xiaohei.im/posts/mq/amqp-0-9-1-model-explained/</link><pubDate>Tue, 03 Sep 2019 10:04:49 +0800</pubDate><guid>https://blog.xiaohei.im/posts/mq/amqp-0-9-1-model-explained/</guid><description/></item><item><title>Hystrix命令执行流程</title><link>https://blog.xiaohei.im/posts/rxjava-in-hystrix/</link><pubDate>Mon, 26 Aug 2019 15:25:08 +0800</pubDate><guid>https://blog.xiaohei.im/posts/rxjava-in-hystrix/</guid><description/></item><item><title>[LeetCode In Rust]189-Rotate Array</title><link>https://blog.xiaohei.im/posts/leetcode/189-rotate-array/</link><pubDate>Wed, 21 Aug 2019 15:29:34 +0800</pubDate><guid>https://blog.xiaohei.im/posts/leetcode/189-rotate-array/</guid><description/></item><item><title>[LeetCode In Rust]026-Remove Duplicates From Sorted Array</title><link>https://blog.xiaohei.im/posts/leetcode/026-remove-duplicates-from-sorted-array/</link><pubDate>Tue, 20 Aug 2019 15:54:47 +0800</pubDate><guid>https://blog.xiaohei.im/posts/leetcode/026-remove-duplicates-from-sorted-array/</guid><description/></item><item><title>[LeetCode In Rust]001-Two Sum</title><link>https://blog.xiaohei.im/posts/leetcode/001-two-sum/</link><pubDate>Fri, 16 Aug 2019 18:22:05 +0800</pubDate><guid>https://blog.xiaohei.im/posts/leetcode/001-two-sum/</guid><description/></item><item><title>RxJava入门</title><link>https://blog.xiaohei.im/posts/rxjava-guide/</link><pubDate>Tue, 21 Aug 2018 16:09:48 +0800</pubDate><guid>https://blog.xiaohei.im/posts/rxjava-guide/</guid><description>&lt;blockquote>
&lt;p>本文基于 rxjava 1.x 版本&lt;/p>
&lt;/blockquote></description></item></channel></rss>